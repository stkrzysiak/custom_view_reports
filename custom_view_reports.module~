<?php

/**
 * @file
 * Custom reports for civicrm grants
 *
 * But doesn't civi have reports?  Doesn't civicrm integrate with views?  Yes to both.  The former has limitations as to what 
 * fields can be set as filters.  Free form fields could not be set as filters, which killed half the report functionality we needed for client.
 * We decided to use views & civicrm views integration but civicrm currently does not have handlers for Grants.  A view custom field was not    * possible due to multiple grants per contact.
 *
 * The proper and logical approach was to use views_query_alter to add a JOIN statement on the grants table and grab our additional fields. 
 * However, this process seemed to break down in views.inc on $this->query->query().  The only alternative without wrestling with views more was * to create this module that queries the DBs, prints the results, and adds an exposed form for filtering.  -Steve Krzysiak Oct, 13th, 2011
 */

/**
 * Implementation of hook_menu()
 * 
 * Add a settings page, and the general award callback  
 * @return
 *   Returns an array definining services, their call backs, and options/info.
 */
function arcs_view_reports_menu() {

  $items['reporting/custom'] = array(
    'title'            => 'Awards',
    'page callback'    => 'arcs_view_reports_load',
    'access arguments' => array('access content'),
    'description'      => 'Customized reports for arcs',
    'type' => MENU_CALLBACK,
  ); 
    $items['reporting/custom/download'] = array(  //this may be unnecessary 
    'title'            => 'Awards',
    'page callback'    => 'arcs_view_reports_download',
    'access arguments' => array('access content'),
    'description'      => 'Download a csv or doc file of the results.',
    'type' => MENU_CALLBACK,
  ); 

  /* this doesnt work for instances where only one arg is in the url, ie reports/%  see code at about 1am october 13th to see original state where this failed */
  /*
  $items['award-reports/%/%/%'] = array(
    'title'            => 'Awards  ',
    'page callback'    => 'arcs_view_reports_load',
    'page arguments'   => array(1,2,3),
    'access arguments' => array('access content'),
    'description'      => 'A reporting api for the civicrm environment',
    'type' => MENU_CALLBACK,
  );  */
  $items['admin/settings/civicrm-reporting'] = array(
    'title' => t('Civicrm Report Settings'),
    'description' => t('Adjust your reporting settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('arcs_view_reports_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

/**
 * Implementation of hook_admin()
 * 
 * Create the admin settings form  for database name & pager length
 * @return
 *   Returns an array of form items
 */
function arcs_view_reports_admin() {
  $form = array();

  $form['arcs_view_reports_db_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Civicrm Database Admin'),
    '#default_value' => variable_get('arcs_view_reports_db_name', "arcsmulti_scholarciviDB"),
    '#size' => 35,
    '#maxlength' => 35,
    '#description' => t("This is different for staging, dev, & production"),
    '#required' => TRUE,
  );
  $form['arcs_view_reports_pager'] = array(
    '#type' => 'textfield',
    '#title' => t('Set pager size'),
    '#default_value' => variable_get('arcs_view_reports_pager', "10"),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Default is 10"),
    '#required' => TRUE,
  );
  $form['arcs_view_reports_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Debug?'),
      '#default_value' => variable_get('arcs_view_reports_debug', FALSE),
      '#description' => t("Log the report query to watchdog & other useful information"),
      '#required' => TRUE,
  );


  return system_settings_form($form);
}

/**
 * return the query for filtering based on years
 * 
 * either all awards in a given year, using like(inefficient??) 
 * @return
 *   $suffix_query: the query to append to our where clause when filtering based on years
 *
 * TODOS: is LIKE the best route if we know the specific year?
 */
function arcs_view_reports_year_range_sql($yrs) {
  if (strpos($yrs, '-'))  {
    $start=substr($yrs, 0, 4) . '-01-01';
    $end=substr($yrs, 5, 4) . '-12-31';
    $suffix_query="AND civicrm_grant.decision_date >= '$start' AND civicrm_grant.decision_date <= '$end'";
  }
  else  {
    $suffix_query="AND civicrm_grant.decision_date LIKE '%$yrs%'"; 
  }
  return ($suffix_query);
}

//not needed yet
function arcs_view_reports_download()  {
print "lets do some downloading";
}


/**
 * Generate the report page
 * 
 * Add a settings page, and the general award callback  
 * @return
 *   Returns the reporting/custom page
 * TODOS: make the queries safe using placeholders
 */
function arcs_view_reports_load($args=NULL, $filter=NULL, $param='')  {

  $debug = variable_get('arcs_view_reports_debug', FALSE);
  $args_total= count(arg());

  //page_view or file download?  
  if (arg($args_total-2)=='download')  {
  $dl=TRUE;
  $type=arg($args_total-1);
  }

  //arg is used due to /%/%/% failing on single paramter calls, like: reporting/custom/awards
  $filter=arg(2);  //what to filter the data on
  $param=arg(3);  //the user provided variable
  if ($filter)  {
    switch ($filter)  {
      case 'chapter':
        $filter_suffix=" AND civicrm_value_individual_1.reporting_chapter_376 LIKE'%$param%'";
        break;
      case 'school':
        $filter_suffix=" AND civicrm_contact_civicrm_relationship.organization_name LIKE '%$param%'";
        break;
      case 'first_name':
        $filter_suffix=" AND civicrm_contact.first_name LIKE '%$param%'";
        break;
      case 'last_name':
        $filter_suffix=" AND civicrm_contact.last_name LIKE '%$param%'";
        break;
      case 'year':
        $filter_suffix=arcs_view_reports_year_range_sql($param);
      break;
      default:
      break;
    }
  }
  $db_name = variable_get('arcs_view_reports_db_name', 'arcsmulti_scholarciviDB');
  if ($debug)  {
    watchdog('arcs_views_reports', 'civi db being used=>' . $db_name);
  }
  $query="SELECT DISTINCT(civicrm_contact.id) AS id,
   civicrm_contact.last_name AS lastname,
   civicrm_contact.first_name AS firstname,
   civicrm_email.email AS email,
   civicrm_value_individual_1.reporting_chapter_376 AS reporting_chapter,
   civicrm_contact_civicrm_relationship.organization_name AS org, 
   civicrm_grant.amount_total AS amount, 
   civicrm_grant.decision_date AS date
   FROM $db_name.civicrm_contact civicrm_contact 
   LEFT JOIN $db_name.civicrm_relationship civicrm_relationship ON civicrm_contact.id = civicrm_relationship.contact_id_a
   LEFT JOIN $db_name.civicrm_contact civicrm_contact_civicrm_relationship ON civicrm_relationship.contact_id_b = civicrm_contact_civicrm_relationship.id
   LEFT JOIN $db_name.civicrm_group_contact civicrm_group_contact ON civicrm_contact.id = civicrm_group_contact.contact_id
   LEFT JOIN $db_name.civicrm_group civicrm_group ON civicrm_group_contact.group_id = civicrm_group.id
   LEFT JOIN $db_name.civicrm_email civicrm_email ON civicrm_contact.id = civicrm_email.contact_id
   LEFT JOIN $db_name.civicrm_value_individual_1 civicrm_value_individual_1 ON civicrm_contact.id = civicrm_value_individual_1.entity_id
   LEFT JOIN $db_name.civicrm_grant civicrm_grant ON civicrm_contact.id = civicrm_grant.contact_id
   WHERE civicrm_group.title in ('Scholar or Scholar Alum')" . $filter_suffix . "
   GROUP BY civicrm_contact.id";
  
  
   $count_query="SELECT count( DISTINCT(civicrm_contact.id) )
   FROM $db_name.civicrm_contact civicrm_contact 
   LEFT JOIN $db_name.civicrm_relationship civicrm_relationship ON civicrm_contact.id = civicrm_relationship.contact_id_a
   LEFT JOIN $db_name.civicrm_contact civicrm_contact_civicrm_relationship ON civicrm_relationship.contact_id_b = civicrm_contact_civicrm_relationship.id
   LEFT JOIN $db_name.civicrm_group_contact civicrm_group_contact ON civicrm_contact.id = civicrm_group_contact.contact_id
   LEFT JOIN $db_name.civicrm_group civicrm_group ON civicrm_group_contact.group_id = civicrm_group.id
   LEFT JOIN $db_name.civicrm_email civicrm_email ON civicrm_contact.id = civicrm_email.contact_id
   LEFT JOIN $db_name.civicrm_value_individual_1 civicrm_value_individual_1 ON civicrm_contact.id = civicrm_value_individual_1.entity_id
   LEFT JOIN $db_name.civicrm_grant civicrm_grant ON civicrm_contact.id = civicrm_grant.contact_id
   WHERE civicrm_group.title in ('Scholar or Scholar Alum')" . $filter_suffix;

   
  $headers = array(
    array('data' => t('First Name'), 'field' => 'civicrm_contact.first_name'),
    array('data' => t('Last Name'), 'field' => 'civicrm_contact.last_name', 'sort' => 'asc'),
    array('data' => t('Email'), 'field' => 'civicrm_email.email'),
    array('data' => t('Chapter'), 'field' => 'civicrm_value_individual_1.reporting_chapter_376'),
    array('data' => t('School'), 'field' => 'civicrm_contact_civicrm_relationship.organization_name'),
    array('data' => t('Amount'), 'field' => 'civicrm_grant.amount_total'),
    array('data' => t('Year'), 'field' => 'civicrm_grant.decision_date'),
    );
  $limit=variable_get('arcs_view_reports_pager', '10');
  $tablesort = tablesort_sql($headers);
  
  $results = pager_query($query . $tablesort, $limit, 0, $count_query);
  if ($debug)  {
    watchdog('arcs_views_reports' , 'query is=>' . $query);
    watchdog('arcs_views_reports' , 'table sort query is=>' . $tablesort);
    watchdog('arcs_views_reports' , 'pager_query=>' . $query . $tablesort);
    watchdog('arcs_views_reports' , 'count query =>' . $count_query);
  }
   
  $rows=array();
  $count=0;
  while ($result = db_fetch_object($results)) { 
    $count++;
    if (!$dl)  {
      array_push($rows, array($result->firstname, $result->lastname, $result->email, $result->reporting_chapter, $result->org, number_format($result->amount), substr($result->date, 0, 4)));
    //print $result['firstname'] . " : " . $result['flastname'] . " : " .$result['email'] . " : " .$result['reporting_chapter'] . " : " .$result['org'] . " : " . $result['amount'] . " : " . $result['date'];
    }
    if (($dl)&&($type=='doc'))  {
      array_push($rows, array($result->firstname, $result->lastname, $result->email, $result->reporting_chapter, $result->org, number_format($result->amount), substr($result->date, 0, 4)));
    //print $result['firstname'] . " : " . $result['flastname'] . " : " .$result['email'] . " : " .$result['reporting_chapter'] . " : " .$result['org'] . " : " . $result['amount'] . " : " . $result['date'];
    }
      else  {
        $csv .= "$result->firstname, $result->lastname, $result->email, $result->reporting_chapter, $result->org, $result->amount, " . substr($result->date, 0, 4) . "\n";
      }
  }

  if (($dl)&&($type=='csv'))  {
    return arcs_views_reports_export_file($headers, $csv, $type);
  }
  elseif (($dl)&&($type=='doc'))  {
    $html .= theme('table', $headers, $rows);
    return arcs_views_reports_export_file($headers, $html, $type);
  }
  else {
    $html = drupal_get_form('arcs_view_reports_form');
    $html .= theme('table', $headers, $rows);
    $html .= theme('pager');
    //$html .= theme_pager( NULL, $limit, 0);
    //$path=str_replace('/scholar/', '',$_SERVER['REQUEST_URI']) . '/download';
    $path=get_uri() . '/download';
    $path='http://' . $_SERVER['SERVER_NAME'] . '/' . $path;
    //$path=str_replace('/reporting/', '',$_SERVER['REQUEST_URI']) . '/download';
    //$html .= '<div="arcs_views_reports_dl_cs">'.l('CSV', $path . '/csv/') . '</div>';
    //$html .= '<div="arcs_views_reports_dl_cs">'.l('DOC', $path . '/doc/') . '</div>';
    $html .= '<div class="feed-icon"> <a href="' . $path . '/csv/"><img width="36" height="14" title="XLS" alt="XLS" src="/scholar/sites/all/modules/views_bonus/export/images/xls.png"></a><a href="' . $path . '/csv/">
    <img width="36" height="14" title="Word Document" alt="Word Document" src="/scholar/sites/all/modules/views_bonus/export/images/doc.png"></a>    </div>';
    return $html;
  }

}


function arcs_views_reports_export_file($headers, $rows, $type) { 
  $filename = 'arcs_report-' . date('m-d-Y-g-i-s') . '.' . $type;
  $header = NULL;
  // Create  within the files folder.
  $csvpath = file_create_path('arcs_views_reports_export');
  file_check_directory($csvpath, FILE_CREATE_DIRECTORY);
  $file = $csvpath .'/'. $filename;
  // Build CSV file.  "a" means we are opening to append, creating if needed.
  if (!$fp = fopen($file, 'ab')) {
    drupal_set_message(t('The file could not be created.'), 'error');
    return FALSE;
  }
    if ($headers) {
      fwrite($fp, $header);
    }
    // would below be better to write to a string and then fwrite?
    //foreach ($rows as $row) {
    //  fwrite($fp, $row);
    //}
    fwrite($fp, $rows);
    fclose($fp);
    drupal_goto($file);
  return TRUE;
  
   // drupal_set_header("Content-type: application/octet-stream; charset=utf-8");
  //drupal_set_header("Content-disposition: attachment; filename=changents_ek_user_export.csv");
  //print $csv;
}


/**
 * Implementation of hook_form()
 * 
 * Create the filters, in views speak these are considered the exposed filters 
 * @return
 *   $form: an array of form elements
 * TODOS: add validation hook for year range, year1 must be less than year2
 */
function arcs_view_reports_form() {
  $form = array(
    //'#action' => url($_GET['q'], array('query' => drupal_get_destination())),
    '#id' => 'arcs_view_reports_form',
    '#submit' => array('arcs_view_reports_submit')
  );

  $form['civicrm_school'] = array(
    '#type' => 'textfield',
    '#title' => t('School'),
    '#size' => 35,
    '#maxlength' => 35,
    '#required' => FALSE,
  );

   $form['civicrm_chapter'] = array(
    '#type' => 'textfield',
    '#title' => t('Chapter'),
    '#size' => 35,
    '#maxlength' => 35,
    '#required' => FALSE,
  );

   $form['civicrm_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 35,
    '#maxlength' => 35,
    '#required' => FALSE,
  );
   $form['civicrm_last_name'] = array(
       '#type' => 'textfield',
       '#title' => t('Last Name'),
       '#size' => 35,
       '#maxlength' => 35,
       '#required' => FALSE,
   );
   $form['awards_year'] = array(
    '#type' => 'textfield',
    '#title' => t('Year(From)'),
    '#size' => 4,
    '#maxlength' => 4,
    '#required' => FALSE,
  );
   $form['awards_year_range'] = array(
    '#type' => 'textfield',
    '#title' => t('Year(To)'),
    '#size' => 4,
    '#maxlength' => 4,
    '#required' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $form['cancel'] = array(
    '#type' => 'button',
    '#attributes' => array('onClick' => 'location.replace("'. referer_uri() .'"); return false;'),
    '#value' => t('Reset'),
  );
  

  return $form;
}
/**
 * Implementation of hook_submit()
 * 
 * There has to be a better way to do this, probably to properly set the #action attribute with the parameters.  Currently it redirects to 
 * self with params in the query.  Not proper.
 * 
 */
function arcs_view_reports_submit($form, &$form_state) {

  drupal_set_message(t('These are your filtered results.'));
  if ($form_state['values']['civicrm_school']!='')  {
    drupal_goto('reporting/custom/school/' . $form_state['values']['civicrm_school']);
  }
  elseif ($form_state['values']['civicrm_chapter']!='')  {
    drupal_goto('reporting/custom/chapter/' . $form_state['values']['civicrm_chapter']);
  }
  elseif ($form_state['values']['civicrm_first_name']!='')  {
    drupal_goto('reporting/custom/first_name/' . $form_state['values']['civicrm_first_name']);
  }
  elseif ($form_state['values']['civicrm_last_name']!='')  {
    drupal_goto('reporting/custom/last_name/' . $form_state['values']['civicrm_last_name']);
  }
  elseif ($form_state['values']['awards_year']!='')  {
    $year=(strlen($form_state['values']['awards_year_range'])>0)?$form_state['values']['awards_year'] . '-' . $form_state['values']['awards_year_range']:$form_state['values']['awards_year'];
    drupal_goto('reporting/custom/year/' . $year);
  }
}
